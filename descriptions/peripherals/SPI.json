{
  "SPI": [
    {
      "name": "CR2",
      "description": "control register 2",
      "offset": "0x04",
      "fields": [
        {
          "name": "TSER",
          "description": "number of data transfer extension to be reload into TSIZE just when a previous number of data stored at TSIZE is transacted This register can be set by software when its cont ent is cleared only. It is cleared by hardware once TSIZE reload is done. The TSER value must be programmed in advance before CTSIZE counter reaches zero otherwise the re load is not taken into account and traffic terminates with normal EOT event.",
          "values": [],
          "mask": "0b11111111111111110000000000000000"
        },
        {
          "name": "TSIZE",
          "description": "number of data at current transfer When these bits are changed by software, the SPI must be disabled. The field can be updated by hardware optionally, too, to be re loaded by the TSER value if applicable. Endless transaction is initialized when CSTART is set while zero val ue is stored at TSIZE. TSIZE cannot be set to 0xF FFF value when CRC is enabled.",
          "values": [],
          "mask": "0b1111111111111111"
        }
      ]
    },
    {
      "name": "CFG1",
      "description": "configuration register 1",
      "offset": "0x08",
      "fields": [
        {
          "name": "MBR",
          "description": "master baud rate MBR setting is considered at slave working at TI mode, too (see Section 50.5.1: TI mode ).",
          "values": [
            ["000", "SPI master clock/2"],
            ["001", "SPI master clock/4"],
            ["010", "SPI master clock/8"],
            ["011", "SPI master clock/16"],
            ["100", "SPI master clock/32"],
            ["101", "SPI master clock/64"],
            ["110", "SPI master clock/128"],
            ["111", "SPI master clock/256"]
          ],
          "mask": "0b1110000000000000000000000000000"
        },
        {
          "name": "CRCEN",
          "description": "hardware CRC computation enable",
          "values": [
            ["0", "CRC calculation disabled"],
            ["1", "CRC calculation Enabled"]
          ],
          "mask": "0b10000000000000000000000"
        },
        {
          "name": "CRCSIZE",
          "description": "length of CRC frame to be transacted and compared Most significant bits are taken into account from polynomial calculation when CRC result is transacted or compared. The length of the poly nomial is not affected by this setting. If CRC calculation is disabled by CRCEN =0, the CRCSIZE field must be kept at its default setting. The most significant bit at CRCSIZE bit fi eld is reserved at the peripheral instances where the data size is limited to 16-bit.",
          "values": [
            ["00000", "reserved"],
            ["00001", "reserved"],
            ["00010", "reserved"],
            ["00011", "4-bits"],
            ["00100", "5-bits"],
            ["00101", "6-bits"],
            ["00110", "7-bits"],
            ["00111", "8-bits....."],
            ["11101", "30-bits"],
            ["11110", "31-bits"],
            ["11111", "32-bitsThe value must be set equal or multiply of da ta size (DSIZE[4:0]). Its maximum size cannot exceed the DSIZE maxi mum at the instance."]
          ],
          "mask": "0b111110000000000000000"
        },
        {
          "name": "TXDMAEN",
          "description": "Tx DMA stream enable",
          "values": [
            ["0", "Tx DMA disabled"],
            ["1", "Tx DMA enabled"]
          ],
          "mask": "0b1000000000000000"
        },
        {
          "name": "RXDMAEN",
          "description": "Rx DMA stream enable",
          "values": [
            ["0", "Rx-DMA disabled"],
            ["1", "Rx-DMA enabled"]
          ],
          "mask": "0b100000000000000"
        },
        {
          "name": "UDRDET",
          "description": "detection of underrun condition at slave transmitter",
          "values": [
            ["00", "underrun is detected at begin of data frame (no protection of 1-st bit)"],
            ["01", "underrun is detected at end of last data frame"],
            ["10", "underrun is detected by begin of active SS signal"],
            ["11", "reservedFor more details see Figure 625: Optional configurations of slave\u2019s behavior at detection of underrun condition ."]
          ],
          "mask": "0b1100000000000"
        },
        {
          "name": "UDRCFG",
          "description": "behavior of slave transmitter at underrun condition",
          "values": [
            ["00", "slave sends a constant pattern defi ned by the user at SPI_UDRDR register"],
            ["01", "slave repeats lastly received data frame from master"],
            ["10", "slave repeats its lastly transmitted data frame"],
            ["11", "reservedWhen slave is configured at transmit only mo de (COMM[1:0]=01), slave repeats all zeros pattern at UDRCFG[ 1:0]=01 setting. For more details see Figure 625: Optional configurations of slave\u2019s behavior at detection of underrun condition ."]
          ],
          "mask": "0b11000000000"
        },
        {
          "name": "FTHLV",
          "description": "FIFO threshold level Defines number of data frames at single data packet. The size of the packet must not exceed 1/2 of FIFO space. The most significant bit at DSIZE bit fiel d is reserved at the peripheral instances where data size is limited to 16-bit.",
          "values": [
            ["0000", "1-data"],
            ["0001", "2-data"],
            ["0010", "3-data"],
            ["0011", "4-data"],
            ["0100", "5-data"],
            ["0101", "6-data"],
            ["0110", "7-data"],
            ["0111", "8-data"],
            ["1000", "9-data"],
            ["1001", "10-data"],
            ["1010", "11-data"],
            ["1011", "12-data"],
            ["1100", "13-data"],
            ["1101", "14-data"],
            ["1110", "15-data"],
            ["1111", "16-dataSPI interface is more efficient if configured pa cket sizes are aligned with data register access parallelism: \u2013 If SPI data register is accessed as a 16-bit register and DSIZE<=8bit, better to select FTHLV=2, 4, 6 etc, \u2013 If SPI data register is accessed as a 32-bit register and DSIZE>8bit, better to select FTHLV=2, 4, 6 etc, while if DSIZE<=8bi t, better to select FTHLV=4, 8, 12 etc DSIZE[4:0]: number of bits in at single SPI data frame 0"],
            ["0000", "not used 0"],
            ["0001", "not used0"],
            ["0010", "not used0"],
            ["0011", "4-bits0"],
            ["0100", "5-bits0"],
            ["0101", "6-bits0"],
            ["0110", "7-bits0"],
            ["0111", "8-bits.....1"],
            ["1101", "30-bits1"],
            ["1110", "31-bits1"],
            ["1111", "32-bits"]
          ],
          "mask": "0b111100000"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b10001111101000000010000000000000"
        }
      ]
    },
    {
      "name": "CFG2",
      "description": "configuration register 2",
      "offset": "0x0C",
      "fields": [
        {
          "name": "4",
          "description": "031 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 AF CNTRSSOM SSOE SSIOP Res. SSM CPOL CPHALSB FRSTMAS TERSP[2",
          "values": [
            ["", "0] COMM[1"],
            ["", "0] Res. rw rw rw rw rw rw rw rw rw rw rw rw rw rw 1 5 1 4 1 3 1 2 1 1 1 0 9876543210 IOSWP Res. Res. Res. Res. Res. Res. Res. MIDI[3"],
            ["", "0] MSSI[3"],
            ["", "0] rw rw rw rw rw rw rw rw rw"]
          ],
          "mask": "0b0"
        },
        {
          "name": "AFCNTR",
          "description": "alternate function GPIOs control This bit is taken into account when SPE=0 only This bit can be also used in PCM and I2S modes.",
          "values": [
            ["0", "the peripheral takes no control of GPIOs while it is disabled"],
            ["1", "the peripheral keeps always control of all associated GPIOsWhen SPI master has to be disabled temporary fo r a specific configuration reason (e.g. CRC reset, CPHA or HDDIR change) setting this bi t prevents any glitches on the associated outputs configured at alternate function mode by keeping them forced at state corresponding the current SPI configuration. This bit must be never used at slave mode as any slave transmitter must not force its MISO output once the SPI is disabled."]
          ],
          "mask": "0b10000000000000000000000000000000"
        },
        {
          "name": "SSOM",
          "description": "SS output management in master mode This bit is taken into account in master mode when SSOE is enabled. It allows to configure SS output between two consecutive data transfers.",
          "values": [
            ["0", "SS is kept at active level till data transfer is completed, it becomes inactive with EOT flag"],
            ["1", "SPI data frames are interleaved with SS non active pulses when MIDI[3:0]>1"]
          ],
          "mask": "0b1000000000000000000000000000000"
        },
        {
          "name": "SSOE",
          "description": "SS output enable This bit is taken into account at master mode only",
          "values": [
            ["0", "SS output is disabled and the SPI can work in multimaster configuration"],
            ["1", "SS output is enabled. The SPI cannot work in a multimaste r environment. It forces the SS pin at inactive level after the transfer is comp leted or SPI is disabled with respect to SSOM, MIDI, MSSI, SSIOP bits setting"]
          ],
          "mask": "0b100000000000000000000000000000"
        },
        {
          "name": "SSIOP",
          "description": "SS input/output polarity",
          "values": [
            ["0", "low level is active for SS signal"],
            ["1", "high level is active for SS signal"]
          ],
          "mask": "0b10000000000000000000000000000"
        },
        {
          "name": "SSM",
          "description": "software management of SS signal input",
          "values": [
            ["0", "SS input value is determined by the SS PAD"],
            ["1", "SS input value is determined by the SSI bitWhen master uses hardware SS output (SSM=0 and SSOE=1), the SS signal input is forced to non active state internally to prevent master mode fault error."]
          ],
          "mask": "0b100000000000000000000000000"
        },
        {
          "name": "CPOL",
          "description": "clock polarity",
          "values": [
            ["0", "SCK signal is at 0 when idle"],
            ["1", "SCK signal is at 1 when idle"]
          ],
          "mask": "0b10000000000000000000000000"
        },
        {
          "name": "CPHA",
          "description": "clock phase",
          "values": [
            ["0", "the first clock transition is the first data capture edge"],
            ["1", "the second clock transition is the first data capture edge"]
          ],
          "mask": "0b1000000000000000000000000"
        },
        {
          "name": "LSBFRST",
          "description": "data frame format This bit can be also used in PCM and I2S modes.",
          "values": [
            ["0", "MSB transmitted first"],
            ["1", "LSB transmitted first"]
          ],
          "mask": "0b100000000000000000000000"
        },
        {
          "name": "MASTER",
          "description": "SPI master",
          "values": [
            ["0", "SPI Slave"],
            ["1", "SPI Master"]
          ],
          "mask": "0b10000000000000000000000"
        },
        {
          "name": "SP",
          "description": "Serial protocol",
          "values": [
            ["000", "SPI Motorola"],
            ["001", "SPI TI"],
            ["others", "Reserved, must not be used"]
          ],
          "mask": "0b1110000000000000000000"
        },
        {
          "name": "COMM",
          "description": "SPI communication mode",
          "values": [
            ["00", "full-duplex"],
            ["01", "simplex transmitter"],
            ["10", "simplex receiver"],
            ["11", "half-duplex"]
          ],
          "mask": "0b1100000000000000000"
        },
        {
          "name": "IOSWP",
          "description": "swap functionality of MISO and MOSI pins This bit can be also used in PCM and I2S modes.",
          "values": [
            ["0", "no swap"],
            ["1", "MOSI and MISO are swappedWhen this bit is set, the function of MISO and MOSI pins alternate functions are inverted. Original MISO pin becomes MOSI and original MOSI pin becomes MISO."]
          ],
          "mask": "0b1000000000000000"
        },
        {
          "name": "MSSI",
          "description": "master SS idleness Specifies an extra de lay, expressed in number of SPI clock cycle periods, inserted additionally between active edge of SS and firs t data of a session start in master mode when SSOE is enabled. This feature is not supported in TI mode.",
          "values": [
            ["0000", "no extra delay"],
            ["0001", "1 clock cycle period delay added ..."],
            ["1111", "15 clock cycle periods delay added"]
          ],
          "mask": "0b1111"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b1000000000010111111100000000"
        }
      ]
    },
    {
      "name": "CRCPOLY",
      "description": "polynomial register",
      "offset": "0x40",
      "fields": [
        {
          "name": "CRCPOLY",
          "description": "CRC polynomial register This register contains the poly nomial for the CRC calculation. The default 9-bit polynomial setting 0x107 correspo nds to default 8-bit sett ing of DSIZE. It is compatible with setting 0x07 used at some other ST products with fixed length of the polynomial string where the most signific ant bit of the string is always kept hidden. Length of the polynomial is given by the most significant bit of the value stored at this register. It has to be set greater than DS IZE. CRC33_17 bit has to be set additionally with CRCPOLY register when DSIZE is configured to maximum 32-bit or 16-bit size and CRC is enabled (to keep polynomial length grater than data size). Bits 31-16 are reserved at the peripheral instances with data size limited to 16-bit. There is no constrain when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored.",
          "values": [],
          "mask": "0b11111111111111111111111111111111"
        }
      ]
    },
    {
      "name": "TXCRC",
      "description": "transmitter CRC register",
      "offset": "0x44",
      "fields": []
    },
    {
      "name": "RXCRC",
      "description": "receiver CRC register",
      "offset": "0x48",
      "fields": [
        {
          "name": "1",
          "description": "031 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 RXCRC[3",
          "values": [["1", "16] rrrrrrrrrrrrrrrr 1 5 1 4 1 3 1 2 1 1 1 0 9876543210 RXCRC[15:0] rrrrrrrrrrrrrrrr"]],
          "mask": "0b1000"
        },
        {
          "name": "RXCRC",
          "description": "CRC register for receiver When CRC calculation is enabled, the RXCRC[ 31:0] bits contain the computed CRC value of the subsequently received bytes. CRC calcul ation is initialized when the CRCEN bit of SPI_CR1 is written to 1 or when a data bl ock is transacted completely. The CRC is calculated serially using the polynomial programmed in the SPI_CRCPOLY register. The number of bits considered at calcul ation depends on SPI_CRCPOLY register and CRCSIZE bits settings at SPI_CFG1 register. A read to this register when the communication is ongoing could return an incorrect value. Not used for the I2S mode. Bits 31-16 are reserved at the peripheral instances with data size limited to 16-bit. There is no constrain when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored. The configuration of CRCSIZE bit field is not taken into account when the content of this register is read by software. No masking is applied for unused bits at this case.",
          "values": [],
          "mask": "0b11111111111111111111111111111111"
        }
      ]
    },
    {
      "name": "UDRDR",
      "description": "underrun data register",
      "offset": "0x4C",
      "fields": [
        {
          "name": "UDRDR",
          "description": "data at slave underrun condition The register is taken into account at slav e mode and at underrun condition only. The number of bits considered depends on DSIZE bit settings at SPI_CFG1 register. Underrun condition handling depends on setting if UDRDET and UDRCFG bits at SPI_CFG1 register. Bits 31-16 are reserved at the peripheral instances with data size limited to 16-bit. There is no constrain when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored.",
          "values": [],
          "mask": "0b11111111111111111111111111111111"
        }
      ]
    }
  ]
}
