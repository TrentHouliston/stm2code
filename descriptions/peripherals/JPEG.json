{
  "JPEG": [
    {
      "name": "CONFR0",
      "description": "codec control register",
      "offset": "0x00",
      "fields": [
        {
          "name": "START",
          "description": "Start This bit start or stop the encoding or decoding process. Reads always return 0.",
          "values": [
            ["0", "Stop/abort"],
            ["1", "Start"]
          ],
          "mask": "0b1"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b11111111111111111111111111111110"
        }
      ]
    },
    {
      "name": "CONFR1",
      "description": "codec configuration register 1",
      "offset": "0x04",
      "fields": [
        {
          "name": "YSIZE",
          "description": "Y Size This field defines the number of lines in source image.",
          "values": [],
          "mask": "0b11111111111111110000000000000000"
        },
        {
          "name": "HDR",
          "description": "Header processing This bit enables the header processing (generation/parsing).",
          "values": [
            ["0", "Disable"],
            ["1", "Enable"]
          ],
          "mask": "0b100000000"
        },
        {
          "name": "NS",
          "description": "Number of components for scan This field defines the number of component s minus 1 for scan header marker segment. COLSPACE[1:0] : Color space This filed defines the number of quantization ta bles minus 1 to insert in the output stream.",
          "values": [
            ["00", "Grayscale (1 quantization table)"],
            ["01", "YUV (2 quantization tables)"],
            ["10", "RGB (3 quant ization tables)"],
            ["11", "CMYK (4 quantization tables)"]
          ],
          "mask": "0b11000000"
        },
        {
          "name": "DE",
          "description": "Codec operation as coder or decoder This bit selects the code or decode process",
          "values": [
            ["0", "Code"],
            ["1", "Decode"]
          ],
          "mask": "0b1000"
        },
        {
          "name": "NF",
          "description": "Number of color components This field defines the number of color components minus 1.",
          "values": [
            ["00", "Grayscale (1 color component)"],
            ["01", "- (2 color components)"],
            ["10", "YUV or RGB (3 color components)"],
            ["11", "CMYK (4 color components)"]
          ],
          "mask": "0b11"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b1111111000000100"
        }
      ]
    },
    {
      "name": "CONFR2",
      "description": "codec configuration register 2",
      "offset": "0x08",
      "fields": [
        {
          "name": "5",
          "description": "431 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Res. Res. Res. Res. Res. Res. NMCU[25",
          "values": [
            ["", "16] rw rw rw rw rw rw rw rw rw rw 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 NMCU[15"],
            ["", "0] rw rw rw rw rw rw rw rw rw rw rw rw rw rw rw rw"]
          ],
          "mask": "0b0"
        },
        {
          "name": "NMCU",
          "description": "Number of MCUs For encoding: this field defines the nu mber of MCU units minus 1 to encode. For decoding: this field indicates the number of complete MCU units minus 1 to be decoded (this field is updated after the JPEG header parsing ). If the decoded image size has not a X or Y size multiple of 8 or 16 (depending on the sub-sampling process), the resulting incomplete or empty MCU must be added to this value to get the total number of MCUs generated.",
          "values": [],
          "mask": "0b11111111111111111111111111"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b11111100000000000000000000000000"
        }
      ]
    },
    {
      "name": "CONFR3",
      "description": "codec configuration register 3",
      "offset": "0x0C",
      "fields": [
        {
          "name": "XSIZE",
          "description": "X size This field defines the number of pixels per line.",
          "values": [],
          "mask": "0b11111111111111110000000000000000"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b1111111111111111"
        }
      ]
    },
    {
      "name": "CONFR",
      "description": "codec configuration register x",
      "offset": "0x10",
      "fields": [
        {
          "name": "HSF",
          "description": "Horizontal sampling factor Horizontal sampling factor for component {x-4}.",
          "values": [],
          "mask": "0b1111000000000000"
        },
        {
          "name": "VSF",
          "description": "Vertical sampling factor Vertical sampling factor for component {x-4}.",
          "values": [],
          "mask": "0b111100000000"
        },
        {
          "name": "NB",
          "description": "Number of blocks Number of data units minus 1 that belong to a particular color in the MCU.",
          "values": [],
          "mask": "0b11110000"
        },
        {
          "name": "QT",
          "description": "Quantization table Selects quantization table used for component {x-4}.",
          "values": [
            ["00", "Quantization table 0"],
            ["01", "Quantization table 1"],
            ["10", "Quantization table 2"],
            ["11", "Quantization table 3 HA: Huffman AC Selects the Huffman table for encoding AC coefficients. 0: Huffman AC table 0 1: Huffman AC table 1"]
          ],
          "mask": "0b1100"
        },
        {
          "name": "HD",
          "description": "Huffman DC Selects the Huffman table fo r encoding DC coefficients.",
          "values": [
            ["0", "Huffman DC table 0"],
            ["1", "Huffman DC table 1"]
          ],
          "mask": "0b1"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b11111111111111110000000000000000"
        }
      ],
      "array": [4]
    },
    {
      "name": "CR",
      "description": "control register",
      "offset": "0x30",
      "fields": [
        {
          "name": "OFF",
          "description": "Output FIFO flush This bit flushes the output FIFO. Reads always return 0.",
          "values": [
            ["0", "No effect"],
            ["1", "Output FIFO is flushed"]
          ],
          "mask": "0b100000000000000"
        },
        {
          "name": "IFF",
          "description": "Input FIFO flush This bit flushes the input FIFO. Reads always return 0.",
          "values": [
            ["0", "No effect"],
            ["1", "Input FIFO is flushed"]
          ],
          "mask": "0b10000000000000"
        },
        {
          "name": "HPDIE",
          "description": "Header parsing done interrupt enable This bit enables interrupt generation upon t he completion of the header parsing operation.",
          "values": [
            ["0", "Disabled"],
            ["1", "Enabled"]
          ],
          "mask": "0b1000000"
        },
        {
          "name": "EOCIE",
          "description": "End of conversion interrupt enable This bit enables interrupt gener ation at the end of conversion.",
          "values": [
            ["0", "Disabled"],
            ["1", "Enabled"]
          ],
          "mask": "0b100000"
        },
        {
          "name": "OFNEIE",
          "description": "Output FIFO not empty interrupt enable This bit enables interrupt generatio n when the output FIFO is not empty.",
          "values": [
            ["0", "Disabled"],
            ["1", "Enabled OFTIE : Output FIFO threshold interrupt enable This bit enables interrupt generation wh en the output FIFO r eaches a threshold."],
            ["0", "Disabled"],
            ["1", "Enabled"]
          ],
          "mask": "0b10000"
        },
        {
          "name": "IFNFIE",
          "description": "Input FIFO not fu ll interrupt enable This bit enables interrupt generatio n when the input FIFO is not empty.",
          "values": [
            ["0", "Disabled"],
            ["1", "Enabled"]
          ],
          "mask": "0b100"
        },
        {
          "name": "IFTIE",
          "description": "Input FIFO threshold interrupt enable This bit enables interrupt generation when the input FIFO reaches a threshold.",
          "values": [
            ["0", "Disabled"],
            ["1", "Enabled"]
          ],
          "mask": "0b10"
        },
        {
          "name": "JCEN",
          "description": "JPEG core enable This bit enables the JPEG codec core.",
          "values": [
            ["0", "Disabled (internal registers are reset)."],
            ["1", "Enabled (internal registers are accessible)."]
          ],
          "mask": "0b1"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b11111111111111111001111110000000"
        }
      ]
    },
    {
      "name": "SR",
      "description": "status register",
      "offset": "0x34",
      "fields": [
        {
          "name": "COF",
          "description": "Codec operation flag This bit flags code/decode operation in progress.",
          "values": [
            ["0", "Not in progress"],
            ["1", "In progress"]
          ],
          "mask": "0b10000000"
        },
        {
          "name": "HPDF",
          "description": "Header parsing done flag In decode mode, this bit flags the completion of header parsing and updating internal registers.",
          "values": [
            ["0", "Not completed"],
            ["1", "Completed"]
          ],
          "mask": "0b1000000"
        },
        {
          "name": "EOCF",
          "description": "End of conversion flag This bit flags the completion of encode/decode pr ocess and data transfer to the output FIFO.",
          "values": [
            ["0", "Not completed"],
            ["1", "Completed OFNEF : Output FIFO not empty flag This bit flags that data is available in the output FIFO."],
            ["0", "Empty (data not available)"],
            ["1", "Not empty (data available)"]
          ],
          "mask": "0b100000"
        },
        {
          "name": "OFTF",
          "description": "Output FIFO threshold flag This bit flags that the amount of data in the output FIFO reaches or exceeds a threshold.",
          "values": [
            ["0", "Below threshold"],
            ["1", "At or above threshold"]
          ],
          "mask": "0b1000"
        },
        {
          "name": "IFNFF",
          "description": "Input FIFO not full flag This bit flags that the input FIFO is not full (data can be written).",
          "values": [
            ["0", "Full"],
            ["1", "Not full"]
          ],
          "mask": "0b100"
        },
        {
          "name": "IFTF",
          "description": "Input FIFO threshold flag This bit flags that the amount of data in the input FIFO is below a threshold.",
          "values": [
            ["0", "At or above threshold"],
            ["1", "Below threshold."]
          ],
          "mask": "0b10"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b11111111111111111111111100000001"
        }
      ]
    },
    {
      "name": "CFR",
      "description": "clear flag register",
      "offset": "0x38",
      "fields": [
        {
          "name": "CHPDF",
          "description": "Clear header parsing done flag Writing 1 clears the HPDF bi t of the JPEG_SR register.",
          "values": [
            ["0", "No effect"],
            ["1", "Clear"]
          ],
          "mask": "0b1000000"
        },
        {
          "name": "CEOCF",
          "description": "Clear end of conversion flag Writing 1 clears the ECF bi t of the JPEG_SR register.",
          "values": [
            ["0", "No effect"],
            ["1", "Clear"]
          ],
          "mask": "0b100000"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b11111111111111111111111110011111"
        }
      ]
    },
    {
      "name": "DIR",
      "description": "data input register",
      "offset": "0x40",
      "fields": [
        {
          "name": "DATAIN",
          "description": "Data input FIFO Input FIFO data register",
          "values": [],
          "mask": "0b11111111111111111111111111111111"
        }
      ]
    },
    {
      "name": "DOR",
      "description": "data output register",
      "offset": "0x44",
      "fields": [
        {
          "name": "DATAOUT",
          "description": "Data output FIFO Output FIFO data register.",
          "values": [],
          "mask": "0b11111111111111111111111111111111"
        }
      ]
    },
    {
      "name": "QMEM",
      "description": "quantization memory x",
      "offset": "0x50",
      "fields": [
        {
          "name": "1",
          "description": "24 QCOEF{4*y+3}[7:0] : Quantization coefficient {4*y+3} 8-bit quantization coefficient.",
          "values": [],
          "mask": "0b1000"
        },
        {
          "name": "3",
          "description": "16 QCOEF{4*y+2}[7:0] : Quantization coefficient {4*y+2} 8-bit quantization coefficient.",
          "values": [],
          "mask": "0b100"
        },
        {
          "name": "5",
          "description": "8 QCOEF{4*y+1}[7:0] : Quantization coefficient {4*y+1} 8-bit quantization coefficient.",
          "values": [],
          "mask": "0b10"
        },
        {
          "name": "7",
          "description": "0 QCOEF{4*y}[7",
          "values": [
            ["", "0]"],
            ["", "Quantization coefficient {4*y} 8-bit quantization coefficient."]
          ],
          "mask": "0b0"
        }
      ],
      "array": [4, 16]
    },
    {
      "name": "HUFFMIN",
      "description": "Huffman min",
      "offset": "0x150",
      "fields": [],
      "array": [4, 3]
    },
    {
      "name": "HUFFMIN",
      "description": "Huffman min x [alternate]",
      "offset": "0x15C",
      "fields": [
        {
          "name": "3",
          "description": "0 DATA{x}[99",
          "values": [
            ["", "96]"],
            ["", "Minimum Huffman value 100-bit minimum Huffman value used internally by the JPEG decoder."]
          ],
          "mask": "0b0"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b11111111111111111111111111110000"
        }
      ],
      "array": [4, 1]
    },
    {
      "name": "HUFFBASE",
      "description": "Huffman base",
      "offset": "0x190",
      "fields": [
        {
          "name": "1",
          "description": "031 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Res. Res. Res. Res. Res. Res. Res. DATA{2*x+1}[8:0] rw rw rw rw rw rw rw rw rw 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 Res. Res. Res. Res. Res. Res. Res. DATA{2*x}[8:0] rw rw rw rw rw rw rw rw rw",
          "values": [],
          "mask": "0b1000"
        },
        {
          "name": "4",
          "description": "16 DATA{2*x+1}[8:0] : Data {2*x+1} Base Huffman value.",
          "values": [],
          "mask": "0b100"
        },
        {
          "name": "8",
          "description": "0 DATA{2*x}[8",
          "values": [
            ["", "0]"],
            ["", "Data {2*x} Base Huffman value."]
          ],
          "mask": "0b0"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b1111111000000000"
        }
      ],
      "array": [32]
    },
    {
      "name": "HUFFSYMB",
      "description": "Huffman symbol",
      "offset": "0x210",
      "fields": [
        {
          "name": "1",
          "description": "24 DATA{4*x+3}[7:0] : Data {4*x+3} Huffman symbol.",
          "values": [],
          "mask": "0b1000"
        },
        {
          "name": "3",
          "description": "16 DATA{4*x+2}[7:0] : Data {4*x+2} Huffman symbol.",
          "values": [],
          "mask": "0b100"
        },
        {
          "name": "5",
          "description": "8 DATA{4*x+1}[7:0] : Data {4*x+1} Huffman symbol.",
          "values": [],
          "mask": "0b10"
        },
        {
          "name": "7",
          "description": "0 DATA{4*x}[7",
          "values": [
            ["", "0]"],
            ["", "Data {4*x} Huffman symbol."]
          ],
          "mask": "0b0"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b11111110000000000000000000000000"
        }
      ],
      "array": [84]
    },
    {
      "name": "DHTMEM",
      "description": "DHT memory",
      "offset": "0x360",
      "fields": [
        {
          "name": "1",
          "description": "24 DATA{4*x+3}[7:0] : Huffman table data {4*x+3} Huffman table data for DHT marker segment generation.",
          "values": [],
          "mask": "0b1000"
        },
        {
          "name": "3",
          "description": "16 DATA{4*x+2}[7:0] : Huffman table data {4*x+2} Huffman table data for DHT marker segment generation.",
          "values": [],
          "mask": "0b100"
        },
        {
          "name": "5",
          "description": "8 DATA{4*x+1}[7:0] : Huffman table data {4*x+1} Huffman table data for DHT marker segment generation.",
          "values": [],
          "mask": "0b10"
        },
        {
          "name": "7",
          "description": "0 DATA{4*x}[7",
          "values": [
            ["", "0]"],
            ["", "Huffman table data {4*x} Huffman table data for DHT marker segment generation."]
          ],
          "mask": "0b0"
        }
      ],
      "array": [103]
    },
    {
      "name": "HUFFENC_AC",
      "description": "Huffman encoder ACx",
      "offset": "0x500",
      "fields": [
        {
          "name": "3",
          "description": "16 HCODE{2*y+1}[7:0] : Huffman code {2*y+1} 8 least significant bits of the Huffman code. If the Huffman code is less than 8 bi ts long, the unused bits must be 0.",
          "values": [],
          "mask": "0b100"
        },
        {
          "name": "1",
          "description": "8 HLEN{2*y}[3:0] : Huffman length {2*y} Number of bits in the Huffman code HCODE{2*y} minus 1.",
          "values": [],
          "mask": "0b10"
        },
        {
          "name": "7",
          "description": "0 HCODE{2*y}[7",
          "values": [
            ["", "0]"],
            ["", "Huffman code {2*y} 8 least significant bits of the Huffman code. If the Huffman code is less than 8 bi ts long, the unused bits must be 0."]
          ],
          "mask": "0b0"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b11110000000000001111000000000000"
        }
      ],
      "array": [2, 88]
    },
    {
      "name": "HUFFENC_DC",
      "description": "Huffman encoder DCx",
      "offset": "0x7C0",
      "fields": [
        {
          "name": "7",
          "description": "2431 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 Res. Res. Res. Res. HLEN{2*y+1}[3:0] HCODE{2*y+1}[7:0] rw rw rw rw rw rw rw rw rw rw rw rw 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 Res. Res. Res. Res. HLEN{2*y}[3:0] HCODE{2*y}[7:0] rw rw rw rw rw rw rw rw rw rw rw rw",
          "values": [],
          "mask": "0b100"
        },
        {
          "name": "7",
          "description": "24 HLEN{2*y+1}[3:0] : Huffman length {2*y+1} Number of bits in the Huffman code HCODE{2*y+1} minus 1.",
          "values": [],
          "mask": "0b100"
        },
        {
          "name": "3",
          "description": "16 HCODE{2*y+1}[7:0] : Huffman code {2*y+1} 8 least significant bits of the Huffman code.If the Huffman code is less than 8 bi ts long, the unused bits must be 0.",
          "values": [],
          "mask": "0b100"
        },
        {
          "name": "1",
          "description": "8 HLEN{2*y}[3:0] : Huffman length {2*y} Number of bits in the Huffman code HCODE{2*y} minus 1.",
          "values": [],
          "mask": "0b10"
        },
        {
          "name": "7",
          "description": "0 HCODE{2*y}[7",
          "values": [
            ["", "0]"],
            ["", "Huffman code {2*y} 8 least significant bits of the Huffman code. If the Huffman code is less than 8 bi ts long, the unused bits must be 0."]
          ],
          "mask": "0b0"
        },
        {
          "name": "Reserved",
          "description": "must be kept at reset value.",
          "values": [],
          "mask": "0b11110000000000001111000000000000"
        }
      ],
      "array": [2, 8]
    }
  ]
}
